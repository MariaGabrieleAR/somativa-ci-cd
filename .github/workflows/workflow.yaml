name: Continuous Integration

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies and build
        run: |
          npm install
          npm run build

  
  test-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Adiciona uma etapa para instalar as dependências do projeto
      - name: Install dependencies
        run: npm install  # ou yarn install

      # Adiciona uma etapa para executar os testes
      - name: Run tests
        run: npm test

  sast-scan-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Adicione uma etapa para instalar as dependências necessárias para a análise SAST
      - name: Install SAST dependencies
        run: |
          # Comando para instalar ferramentas SAST, se necessário

      # Adicione uma etapa para executar a análise SAST
      - name: Run SAST Scan
        run: |
          # Comando para executar a análise SAST, substitua pelo comando específico da ferramenta que você está usando

  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t sua_imagem_docker .

  test-docker-image:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

        - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Test Docker image
        run: |
          # Executa um contêiner a partir da imagem Docker
          docker run -d --name test-container -p 8080:8080 sua_imagem_docker
          sleep 10  # Aguarda alguns segundos para que a aplicação inicialize completamente
          # Realiza uma solicitação HTTP para a aplicação em execução
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080)
          # Verifica se a resposta é 200 (OK)
          if [ $response -eq 200 ]; then
            echo "Teste passou: Aplicação está respondendo corretamente."
          else
            echo "Teste falhou: Aplicação não está respondendo corretamente. Código de resposta HTTP: $response"
            exit 1
          fi

  deploy-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy
        run: |
          # Comando para deploy
          echo "Finalizou"
