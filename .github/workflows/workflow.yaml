name: Continuous Integration

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened]

jobs:
  build-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies and build
        run: |
          npm install
          npm run build

  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install dependencies
        run: npm install  # ou yarn install

      - name: Run tests
        run: npm test

  sast-scan-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install SAST dependencies
        run: |
          # Comando para instalar ferramentas SAST, se necessário

      - name: Run SAST Scan
        run: |
          # Comando para executar a análise SAST, substitua pelo comando específico da ferramenta que você está usando

  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t minha-aplicacao .

  test-docker-image:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Test Docker image
        run: |
          # Executa um contêiner a partir da imagem Docker
          docker run -d -p 3000:3000 gaabimgb/minha-aplicacao:latest
          sleep 10  # Aguarda alguns segundos para que a aplicação inicialize completamente
          # Realiza uma solicitação HTTP para a aplicação em execução
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          # Verifica se a resposta é 200 (OK)
          if [ $response -eq 200 ]; then
            echo "Teste passou: Aplicação está respondendo corretamente."
          else
            echo "Teste falhou: Aplicação não está respondendo corretamente. Código de resposta HTTP: $response"
            exit 1
          fi

  notify-discord:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Extract PR information
        id: pr
        uses: gr2m/get-json-paths-action@v1
        with:
          json: ${{ toJson(github.event.pull_request) }}
          paths: |
            number
            title
            html_url
            user.login

      - name: Notify Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "New PR opened!\nTitle: ${{ steps.pr.outputs.title }}\nNumber: ${{ steps.pr.outputs.number }}\nBy: ${{ steps.pr.outputs.user.login }}\nURL: ${{ steps.pr.outputs.html_url }}"
          }' $DISCORD_WEBHOOK